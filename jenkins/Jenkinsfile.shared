// jenkins/Jenkinsfile.shared
//
// This file encapsulates the reusable CI/CD pipeline logic for microservices.
// It is designed to be loaded by individual service-specific Jenkinsfiles,
// promoting a 'Don't Repeat Yourself' (DRY) principle for pipeline definitions.
//
// Prerequsites:
// - `SERVICE` (string): Must be defined in the calling Jenkinsfile (e.g., "user-service").
// - `BUILD_NUMBER` (string): Automatically provided by Jenkins (env.BUILD_NUMBER).
// - `DOCKERHUB_PASS` (Credential ID): Jenkins credential for Docker Hub push.
//
// Agent Requirements:
// - The Jenkins controller or an available static agent must have:
//   - Java Development Kit (JDK)
//   - Apache Maven
//   - Python and pip
//   - Docker CLI (and access to a Docker daemon, e.g., user in 'docker' group)
//   - Helm CLI
//   - Kubectl CLI (configured to interact with your Kubernetes cluster, e.g., k3s)

pipeline {
  // Define the agent where all pipeline stages will execute.
  // 'agent any' means Jenkins will use any available agent, typically the controller itself
  // if no other agents are configured, or the first available static agent.
  agent any

  // --- Global Environment Variables ---
  environment {
    IMAGE = "tdksfot/${SERVICE}"
    DOCKER_HUB_CREDENTIAL_ID = 'DOCKERHUB_PASS'
  }

  // --- Pipeline Stages ---
  stages {
    stage('Build & Push Image') {
      steps {
        script {
          dir("${SERVICE}") {
            echo "--- Processing service: ${SERVICE} ---"

            // --- Language-Specific Build Preparation ---
            if (fileExists('pom.xml')) {
              echo "INFO: Detected Java/Maven project. Running 'mvn clean package -DskipTests'."
              sh 'mvn clean package -DskipTests'
            } else if (fileExists('requirements.txt')) {
              echo "INFO: Detected Python project. Dependencies will be installed via Dockerfile."
            } else {
              error "ERROR: Neither 'pom.xml' nor 'requirements.txt' found in '${SERVICE}' directory. Cannot determine build type."
            }

            // --- Docker Build and Push ---
            docker.withRegistry('https://registry.hub.docker.com', "${DOCKER_HUB_CREDENTIAL_ID}") {
              echo "INFO: Building and pushing Docker image: ${IMAGE}:${BUILD_NUMBER} to Docker Hub."
              def builtImage = docker.build("${IMAGE}:${BUILD_NUMBER}", '.')
              builtImage.push()
              echo "SUCCESS: Docker image '${IMAGE}:${BUILD_NUMBER}' successfully built and pushed."
            }
          }
        }
      }
    }

    stage('Deploy Helm') {
      steps {
        script {
          def targetNamespace = ""

          if (env.BRANCH_NAME == "develop") {
            targetNamespace = "dev"
          } else if (env.BRANCH_NAME == "staging") {
            targetNamespace = "staging"
          } else if (env.BRANCH_NAME == "main") {
            targetNamespace = "prod"
          } else {
            echo "INFO: Skipping deployment for branch '${env.BRANCH_NAME}'. No matching deployment environment found."
            return
          }

          echo "INFO: Target Kubernetes Namespace identified: '${targetNamespace}'."
          echo "INFO: Ensuring Kubernetes namespace '${targetNamespace}' exists."
          sh "kubectl create namespace ${targetNamespace} --dry-run=client -o yaml | kubectl apply -f -"

          dir("${SERVICE}/helm/${SERVICE}") {
            echo "INFO: Deploying Helm chart for '${SERVICE}' to namespace '${targetNamespace}'..."
            sh """
              helm upgrade --install ${SERVICE} . \\
                --namespace ${targetNamespace} \\
                --set image.repository=${IMAGE} \\
                --set image.tag=${BUILD_NUMBER} \\
                --wait \\
                --timeout 5m
            """
            echo "SUCCESS: Helm deployment for '${SERVICE}' completed successfully in namespace '${targetNamespace}'."
          }
        }
      }
    }
  }

  // --- Post-build Actions ---
  post {
    failure {
      echo "ERROR: Pipeline for ${SERVICE} on branch ${env.BRANCH_NAME} failed!"
      mail to: 'devops@monprojet.com',
           subject: "Pipeline Failure: ${SERVICE} - Branch: ${env.BRANCH_NAME}",
           body: """
             The CI/CD pipeline for service '${SERVICE}' on branch '${env.BRANCH_NAME}' has failed.

             Build Number: ${env.BUILD_NUMBER}
             Project Name: ${env.JOB_NAME}
             Full Log: ${env.BUILD_URL}/console

             Please review the Jenkins console output for details.
           """.stripIndent()
    }
    success {
      echo "SUCCESS: Pipeline for ${SERVICE} on branch ${env.BRANCH_NAME} completed successfully!"
    }
  }
}