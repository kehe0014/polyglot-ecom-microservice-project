// jenkins/Jenkinsfile.shared
//
// Ce fichier encapsule la logique de pipeline CI/CD réutilisable pour les microservices.
// Il est conçu pour être le Jenkinsfile principal d'un job paramétré,
// permettant aux utilisateurs de sélectionner le microservice cible à construire et déployer.
//
// Exigences de l'agent :
// - Le contrôleur Jenkins ou un agent statique disponible doit avoir :
//   - Kit de développement Java (JDK)
//   - Apache Maven
//   - Python et pip
//   - CLI Docker (et accès à un démon Docker, par ex. utilisateur dans le groupe 'docker')
//   - CLI Helm
//   - CLI Kubectl (configuré pour interagir avec votre cluster Kubernetes, par ex. k3s)

pipeline {
  agent any

  // Définir les paramètres pour ce pipeline.
  // Lors du démarrage d'une construction, Jenkins présentera ces options à l'utilisateur.
  parameters {
    // Paramètre de chaîne pour sélectionner le microservice cible.
    // 'defaultValue' garantit que 'user-service' est présélectionné.
    string(name: 'TARGET_SERVICE_NAME', defaultValue: 'user-service', description: 'Sélectionnez le microservice à construire et déployer.')

    // Ajouter d'autres paramètres si nécessaire, par ex. pour les options de construction, l'environnement de déploiement.
  }

  // --- Variables d'environnement globales ---
  environment {
    // La variable SERVICE est maintenant définie dynamiquement à partir du paramètre choisi.
    SERVICE = "${params.TARGET_SERVICE_NAME}"

    // BUILD_NUMBER est une variable d'environnement Jenkins inhérente.
    BUILD_NUMBER = "${env.BUILD_NUMBER}"

    // Construit le nom de l'image Docker en utilisant votre ID Docker Hub et le nom du service.
    IMAGE = "tdksoft/${SERVICE}" // Assurez-vous que 'tdksoft' est bien votre nom d'utilisateur Docker Hub
  }

  // --- Étapes du pipeline ---
  stages {
    // Étape 1 : Construire les artefacts d'application et pousser l'image Docker
    // Cette étape gère la compilation/l'empaquetage spécifique au langage, puis
    // construit et pousse l'image Docker vers le registre.
    stage('Build & Push Image') {
      steps {
        script {
          // Important : Changer le répertoire de travail actuel vers le répertoire racine du microservice spécifique,
          // déterminé par le paramètre choisi.
          dir("${SERVICE}") {
            echo "--- Traitement du service : ${SERVICE} ---"

            // --- Préparation de la construction spécifique au langage ---
            // Détecte le type de projet (Java/Maven ou Python) et effectue
            // les étapes nécessaires avant la construction Docker.
            if (fileExists('pom.xml')) {
              echo "INFO: Projet Java/Maven détecté. Exécution de 'mvn clean package -DskipTests'."
              sh 'mvn clean package -DskipTests'
            } else if (fileExists('requirements.txt')) {
              echo "INFO: Projet Python détecté. Les dépendances seront installées via Dockerfile."
            } else {
              // Si le type de projet ne peut pas être déterminé, arrêter le pipeline.
              error "ERREUR : Ni 'pom.xml' ni 'requirements.txt' trouvés dans le répertoire '${SERVICE}'. Impossible de déterminer le type de construction."
            }

            // --- Construction et push Docker (avec login explicite) ---
            // Utilise 'withCredentials' pour exposer le texte secret du PAT dans une variable temporaire,
            // puis exécute 'docker login' et 'docker push'.
            withCredentials([string(credentialsId: 'DOCKER_HUB_PASS', variable: 'DOCKER_HUB_PAT_VALUE')]) {
              echo "INFO: Authentification auprès de Docker Hub et construction/push de l'image : ${IMAGE}:${BUILD_NUMBER}."

              // Exécuter la commande docker login.
              // Note: Le nom d'utilisateur pour docker login avec un PAT est votre nom d'utilisateur Docker Hub ('tdksoft').
              // Le PAT est passé via stdin pour des raisons de sécurité.
              sh "echo ${DOCKER_HUB_PAT_VALUE} | docker login --username tdksoft --password-stdin https://registry.hub.docker.com"

              // Construire l'image Docker. Le '.' spécifie le contexte de construction Docker comme le répertoire actuel.
              def builtImage = docker.build("${IMAGE}:${BUILD_NUMBER}", '.')
              
              // Pousser l'image vers Docker Hub.
              builtImage.push()

              // Déconnexion de Docker Hub pour nettoyer l'environnement de l'agent.
              sh "docker logout https://registry.hub.docker.com"
              
              echo "SUCCÈS : L'image Docker '${IMAGE}:${BUILD_NUMBER}' a été construite et poussée avec succès."
            }
          }
        }
      }
    }

    // Étape 2 : Déployer l'application avec Helm
    // Cette étape gère le déploiement de l'image Docker sur Kubernetes à l'aide de Helm.
    stage('Deploy Helm') {
      steps {
        script {
          def targetNamespace = "" // Variable pour contenir l'espace de noms Kubernetes cible

          // Déterminer l'espace de noms Kubernetes cible en fonction de la branche Git.
          if (env.BRANCH_NAME == "develop") {
            targetNamespace = "dev"
          } else if (env.BRANCH_NAME == "staging") {
            targetNamespace = "staging"
          } else if (env.BRANCH_NAME == "main") {
            targetNamespace = "prod"
          } else {
            echo "INFO: Saut du déploiement pour la branche '${env.BRANCH_NAME}'. Aucun environnement de déploiement correspondant trouvé."
            return // Quitter cette étape pour les branches non gérées
          }

          echo "INFO: Espace de noms Kubernetes cible identifié : '${targetNamespace}'."
          echo "INFO: Vérification de l'existence de l'espace de noms Kubernetes '${targetNamespace}'."
          sh "kubectl create namespace ${targetNamespace} --dry-run=client -o yaml | kubectl apply -f -"

          // Changer le répertoire vers le chart Helm pour le service sélectionné.
          dir("${SERVICE}/helm/${SERVICE}") {
            echo "INFO: Déploiement du chart Helm pour '${SERVICE}' dans l'espace de noms '${targetNamespace}'..."
            sh """
              helm upgrade --install ${SERVICE} . \\
                --namespace ${targetNamespace} \\
                --set image.repository=${IMAGE} \\
                --set image.tag=${BUILD_NUMBER} \\
                --wait \\
                --timeout 5m
            """
            echo "SUCCÈS : Le déploiement Helm pour '${SERVICE}' s'est terminé avec succès dans l'espace de noms '${targetNamespace}'."
          }
        }
      }
    }
  }

  // --- Actions post-construction ---
  // Actions à exécuter après que toutes les étapes sont terminées, quel que soit leur résultat.
  post {
    // Action à entreprendre si une étape du pipeline échoue.
    failure {
      echo "ERREUR : Le pipeline pour ${SERVICE} sur la branche ${env.BRANCH_NAME} a échoué !"
      // Envoyer une notification par e-mail en cas d'échec du pipeline.
      // Cela dépend de la configuration globale des e-mails de Jenkins (Gérer Jenkins -> Configurer le système).
      mail to: 'devops@monprojet.com',
           subject: "Échec du pipeline : ${SERVICE} - Branche : ${env.BRANCH_NAME}",
           body: """
             Le pipeline CI/CD pour le service '${SERVICE}' sur la branche '${env.BRANCH_NAME}' a échoué.

             Numéro de build : ${env.BUILD_NUMBER}
             Nom du projet : ${env.JOB_NAME}
             Journal complet : ${env.BUILD_URL}/console

             Veuillez consulter la sortie de la console Jenkins pour plus de détails.
           """.stripIndent()
    }
    // Action à entreprendre si le pipeline se termine avec succès.
    success {
      echo "SUCCÈS : Le pipeline pour ${SERVICE} sur la branche ${env.BRANCH_NAME} s'est terminé avec succès !"
    }
    // Ajouter d'autres actions post-construction si nécessaire (par ex. 'always', 'unstable', 'cleanup').
  }
}
